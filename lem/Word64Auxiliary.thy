chapter {* Generated by Lem from word64.lem. *}

theory "Word64Auxiliary" 

imports 
 	 Main "~~/src/HOL/Library/Code_Target_Numeral"
	 "Lem_pervasives" 
	 "Lem_word" 
	 "Word64" 

begin 


(****************************************************)
(*                                                  *)
(* Lemmata                                          *)
(*                                                  *)
(****************************************************)

lemma bs_to_w64_def_lemma:
" ((\<forall> seq.
   (case  resizeBitSeq (Some (( 64 :: nat))) seq of
         BitSeq _ s b => W64 s b
   ) = (\<lambda> w .  word_of_int (integerFromBitSeq w)) seq)) "
(* Theorem: bs_to_w64_def_lemma*)(* try *) by auto

lemma w64_to_bs_def_lemma:
" ((\<forall> s. \<forall> b.
   BitSeq (Some (( 64 :: nat))) s b =
     (\<lambda> w .  bitSeqFromInteger (Some 64) (sint w)) (W64 s b))) "
(* Theorem: w64_to_bs_def_lemma*)(* try *) by auto

lemma word64ToInteger_def_lemma:
" ((\<forall> w.
   integerFromBitSeq
     ((\<lambda> w .  bitSeqFromInteger (Some 64) (sint w)) w) = sint w)) "
(* Theorem: word64ToInteger_def_lemma*)(* try *) by auto

lemma word64ToNatural_def_lemma:
" ((\<forall> w. nat (abs ((sint w) mod size64)) = unat w)) "
(* Theorem: word64ToNatural_def_lemma*)(* try *) by auto

lemma word64FromInteger_def_lemma:
" ((\<forall> i.
   (\<lambda> w .  word_of_int (integerFromBitSeq w))
     (bitSeqFromInteger (Some (( 64 :: nat))) i) =
     (\<lambda> i .  word_of_int ( i)) i)) "
(* Theorem: word64FromInteger_def_lemma*)(* try *) by auto

lemma word64FromInt_def_lemma:
" ((\<forall> i.
   (\<lambda> w .  word_of_int (integerFromBitSeq w))
     (bitSeqFromInteger (Some (( 64 :: nat))) ( i)) = word_of_int i)) "
(* Theorem: word64FromInt_def_lemma*)(* try *) by auto

lemma word64FromBoollist_def_lemma:
" ((\<forall> lst.
   (case  bitSeqFromBoolList (List.rev lst) of
         None => (\<lambda> w .  word_of_int (integerFromBitSeq w))
                   (bitSeqFromInteger None (( 0 :: int)))
     | Some a => (\<lambda> w .  word_of_int (integerFromBitSeq w)) a
   ) = of_bl lst)) "
(* Theorem: word64FromBoollist_def_lemma*)(* try *) by auto

lemma boolListFromWord64_def_lemma:
" ((\<forall> w.
   List.rev
     (boolListFrombitSeq (( 64 :: nat))
        ((\<lambda> w .  bitSeqFromInteger (Some 64) (sint w)) w)) = 
   to_bl w)) "
(* Theorem: boolListFromWord64_def_lemma*)(* try *) by auto

lemma word64FromNumeral_def_lemma:
" ((\<forall> w.
   (\<lambda> w .  word_of_int (integerFromBitSeq w))
     (bitSeqFromInteger None (( w :: int))) = ((word_of_int w) :: 64 word))) "
(* Theorem: word64FromNumeral_def_lemma*)(* try *) by auto

lemma w64Less_def_lemma:
" ((\<forall> bs1. \<forall> bs2.
   word64BinTest bitSeqLess bs1 bs2 = word_sless bs1 bs2)) "
(* Theorem: w64Less_def_lemma*)(* try *) by auto

lemma w64LessEqual_def_lemma:
" ((\<forall> bs1. \<forall> bs2.
   word64BinTest bitSeqLessEqual bs1 bs2 = word_sle bs1 bs2)) "
(* Theorem: w64LessEqual_def_lemma*)(* try *) by auto

lemma w64Greater_def_lemma:
" ((\<forall> bs1. \<forall> bs2.
   word64BinTest bitSeqGreater bs1 bs2 = word_sless bs2 bs1)) "
(* Theorem: w64Greater_def_lemma*)(* try *) by auto

lemma w64GreaterEqual_def_lemma:
" ((\<forall> bs1. \<forall> bs2.
   word64BinTest bitSeqGreaterEqual bs1 bs2 = word_sle bs2 bs1)) "
(* Theorem: w64GreaterEqual_def_lemma*)(* try *) by auto

lemma w64Compare_def_lemma:
" ((\<forall> bs1. \<forall> bs2.
   word64BinTest bitSeqCompare bs1 bs2 =
     (genericCompare word_sless w64Eq bs1 bs2))) "
(* Theorem: w64Compare_def_lemma*)(* try *) by auto

lemma word64Negate_def_lemma:
" (( word64UnaryOp bitSeqNegate = (\<lambda> i. - i))) "
(* Theorem: word64Negate_def_lemma*)(* try *) by auto

lemma word64Succ_def_lemma:
" (( word64UnaryOp bitSeqSucc = (\<lambda> n. n + 1))) "
(* Theorem: word64Succ_def_lemma*)(* try *) by auto

lemma word64Pred_def_lemma:
" (( word64UnaryOp bitSeqPred = (\<lambda> n. n - 1))) "
(* Theorem: word64Pred_def_lemma*)(* try *) by auto

lemma word64Lnot_def_lemma:
" (( word64UnaryOp bitSeqNot = (\<lambda> w. (NOT w)))) "
(* Theorem: word64Lnot_def_lemma*)(* try *) by auto

lemma word64Add_def_lemma:
" (( word64BinOp bitSeqAdd = (op+))) "
(* Theorem: word64Add_def_lemma*)(* try *) by auto

lemma word64Minus_def_lemma:
" (( word64BinOp bitSeqMinus = (op-))) "
(* Theorem: word64Minus_def_lemma*)(* try *) by auto

lemma word64Mult_def_lemma:
" (( word64BinOp bitSeqMult = (op*))) "
(* Theorem: word64Mult_def_lemma*)(* try *) by auto

lemma word64IntegerDivision_def_lemma:
" (( word64BinOp bitSeqDiv = (op div))) "
(* Theorem: word64IntegerDivision_def_lemma*)(* try *) by auto

lemma word64Division_def_lemma:
" (( word64BinOp bitSeqDiv = (op div))) "
(* Theorem: word64Division_def_lemma*)(* try *) by auto

lemma word64Remainder_def_lemma:
" (( word64BinOp bitSeqMod = (op mod))) "
(* Theorem: word64Remainder_def_lemma*)(* try *) by auto

lemma word64Land_def_lemma:
" (( word64BinOp bitSeqAnd = (op AND))) "
(* Theorem: word64Land_def_lemma*)(* try *) by auto

lemma word64Lor_def_lemma:
" (( word64BinOp bitSeqOr = (op OR))) "
(* Theorem: word64Lor_def_lemma*)(* try *) by auto

lemma word64Lxor_def_lemma:
" (( word64BinOp bitSeqXor = (op XOR))) "
(* Theorem: word64Lxor_def_lemma*)(* try *) by auto

lemma word64Min_def_lemma:
" (( word64BinOp (bitSeqMin) = min)) "
(* Theorem: word64Min_def_lemma*)(* try *) by auto

lemma word64Max_def_lemma:
" (( word64BinOp (bitSeqMax) = max)) "
(* Theorem: word64Max_def_lemma*)(* try *) by auto

lemma word64Power_def_lemma:
" (( word64NatOp bitSeqPow = (op^))) "
(* Theorem: word64Power_def_lemma*)(* try *) by auto

lemma word64Asr_def_lemma:
" (( word64NatOp bitSeqArithmeticShiftRight = (op>>>))) "
(* Theorem: word64Asr_def_lemma*)(* try *) by auto

lemma word64Lsr_def_lemma:
" (( word64NatOp bitSeqLogicalShiftRight = (op>>))) "
(* Theorem: word64Lsr_def_lemma*)(* try *) by auto

lemma word64Lsl_def_lemma:
" (( word64NatOp bitSeqShiftLeft = (op<<))) "
(* Theorem: word64Lsl_def_lemma*)(* try *) by auto

lemma word64UGT_def_lemma:
" ((\<forall> a. \<forall> b. (unat a > unat b) = a > b)) "
(* Theorem: word64UGT_def_lemma*)(* try *) by auto

lemma word64ULT_def_lemma:
" ((\<forall> a. \<forall> b. (unat a < unat b) = a < b)) "
(* Theorem: word64ULT_def_lemma*)(* try *) by auto

lemma word64UGE_def_lemma:
" ((\<forall> a. \<forall> b. (unat a \<ge> unat b) = a >= b)) "
(* Theorem: word64UGE_def_lemma*)(* try *) by auto



end
