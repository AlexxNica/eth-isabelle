(* Generated by Lem from word256.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

(*
  Copyright 2016 Sami MÃ¤kelÃ¤

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)

Require Import lem_pervasives.
Require Export lem_pervasives.

Require Import lem_word.
Require Export lem_word.


Inductive word256 : Type :=  W256:  bool  ->  list  bool  -> word256 .
Definition word256_default: word256  := W256 bool_default DAEMON.
(* [?]: removed value specification. *)

Definition bs_to_w256  (seq : bitSequence )  : word256 :=  match ( resizeBitSeq (Some( 256)) seq) with 
 | BitSeq _ s b => W256 s b
end.
(* [?]: removed value specification. *)

Definition w256_to_bs  (w : word256 )  : bitSequence := 
  match ( (w)) with (( W256 s b)) => BitSeq (Some ( 256)) s b end.
(* [?]: removed value specification. *)

Definition word256BinTest {a : Type}  (binop : bitSequence  -> bitSequence  -> a) (w1 : word256 ) (w2 : word256 )  : a:=  binop (w256_to_bs w1) (w256_to_bs w2).
(* [?]: removed value specification. *)

Definition word256BinOp  (binop : bitSequence  -> bitSequence  -> bitSequence ) (w1 : word256 ) (w2 : word256 )  : word256 :=  bs_to_w256 (binop (w256_to_bs w1) (w256_to_bs w2)).
(* [?]: removed value specification. *)

Definition word256NatOp  (binop : bitSequence  -> nat  -> bitSequence ) (w1 : word256 ) (n : nat )  : word256 :=  bs_to_w256 (binop (w256_to_bs w1) n).
(* [?]: removed value specification. *)

Definition word256UnaryOp  (op : bitSequence  -> bitSequence ) (w : word256 )  : word256 :=  bs_to_w256 (op (w256_to_bs w)).
(* [?]: removed value specification. *)

Definition size256   : Z :=  Coq.ZArith.Zpower.Zpower_nat((Zpred (Zpos (P_of_succ_nat 2))))( 256).
(* [?]: removed value specification. *)

Definition word256ToInteger  (w : word256 )  : Z :=  integerFromBitSeq (w256_to_bs w).
(* [?]: removed value specification. *)

Definition word256ToNatural  (w : word256 )  : nat :=  Zabs_nat ( Coq.ZArith.Zdiv.Zmod(word256ToInteger w) size256).
(* [?]: removed value specification. *)

Definition word256FromInteger  (i : Z )  : word256 :=  bs_to_w256 (bitSeqFromInteger (Some( 256)) i).
(* [?]: removed value specification. *)

Definition word256FromInt  (i : Z )  : word256 :=  bs_to_w256 (bitSeqFromInteger (Some( 256)) ( i)).
(* [?]: removed value specification. *)

Definition word256FromNatural  (i : nat )  : word256 :=  word256FromInteger ((Zpred (Zpos (P_of_succ_nat i)))).
(* [?]: removed value specification. *)

Definition word256FromNat  (i : nat )  : word256 :=  word256FromInteger ((Zpred (Zpos (P_of_succ_nat i)))).
(* [?]: removed value specification. *)

Definition word256FromBoollist  (lst : list (bool ))  : word256 :=  match ( bitSeqFromBoolList (List.rev lst)) with 
 | None => bs_to_w256(bitSeqFromInteger None ((Zpred (Zpos (P_of_succ_nat 0)))))
 | Some a => bs_to_w256 a
end.
(* [?]: removed value specification. *)

Definition boolListFromWord256  (w : word256 )  : list (bool ):=  List.rev (boolListFrombitSeq( 256) (w256_to_bs w)).
(* [?]: removed value specification. *)

Definition word256FromNumeral  (w : nat )  : word256 :=  bs_to_w256 (bitSeqFromInteger None ((Zpred (Zpos (P_of_succ_nat w))))).
(* 

Instance x20_Numeral : Numeral word256 := {
   fromNumeral  :=  word256FromNumeral
}.
 *)
(* [?]: removed value specification. *)

Definition w256Eq   : word256  -> word256  -> bool :=  classical_boolean_equivalence.
(* [?]: removed value specification. *)

Definition w256Less  (bs1 : word256 ) (bs2 : word256 )  : bool :=  word256BinTest bitSeqLess bs1 bs2.
(* [?]: removed value specification. *)

Definition w256LessEqual  (bs1 : word256 ) (bs2 : word256 )  : bool :=  word256BinTest bitSeqLessEqual bs1 bs2.
(* [?]: removed value specification. *)

Definition w256Greater  (bs1 : word256 ) (bs2 : word256 )  : bool :=  word256BinTest bitSeqGreater bs1 bs2.
(* [?]: removed value specification. *)

Definition w256GreaterEqual  (bs1 : word256 ) (bs2 : word256 )  : bool :=  word256BinTest bitSeqGreaterEqual bs1 bs2.
(* [?]: removed value specification. *)

Definition w256Compare  (bs1 : word256 ) (bs2 : word256 )  : ordering :=  word256BinTest bitSeqCompare bs1 bs2.

Instance x19_Ord : Ord word256 := {
   compare  :=  w256Compare;
   isLess  :=  w256Less;
   isLessEqual  :=  w256LessEqual;
   isGreater  :=  w256Greater;
   isGreaterEqual  :=  w256GreaterEqual
}.


Instance x18_SetType : SetType word256 := {
   setElemCompare  :=  w256Compare
}.

(* [?]: removed value specification. *)

Definition word256Negate   : word256  -> word256 :=  word256UnaryOp bitSeqNegate.
(* [?]: removed value specification. *)

Definition word256Succ   : word256  -> word256 :=  word256UnaryOp bitSeqSucc.
(* [?]: removed value specification. *)

Definition word256Pred   : word256  -> word256 :=  word256UnaryOp bitSeqPred.
(* [?]: removed value specification. *)

Definition word256Lnot   : word256  -> word256 :=  word256UnaryOp bitSeqNot.
(* [?]: removed value specification. *)

Definition word256Add   : word256  -> word256  -> word256 :=  word256BinOp bitSeqAdd.
(* [?]: removed value specification. *)

Definition word256Minus   : word256  -> word256  -> word256 :=  word256BinOp bitSeqMinus.
(* [?]: removed value specification. *)

Definition word256Mult   : word256  -> word256  -> word256 :=  word256BinOp bitSeqMult.
(* [?]: removed value specification. *)

Definition word256IntegerDivision   : word256  -> word256  -> word256 :=  word256BinOp bitSeqDiv.
(* [?]: removed value specification. *)

Definition word256Division   : word256  -> word256  -> word256 :=  word256BinOp bitSeqDiv.
(* [?]: removed value specification. *)

Definition word256Remainder   : word256  -> word256  -> word256 :=  word256BinOp bitSeqMod.
(* [?]: removed value specification. *)

Definition word256Land   : word256  -> word256  -> word256 :=  word256BinOp bitSeqAnd.
(* [?]: removed value specification. *)

Definition word256Lor   : word256  -> word256  -> word256 :=  word256BinOp bitSeqOr.
(* [?]: removed value specification. *)

Definition word256Lxor   : word256  -> word256  -> word256 :=  word256BinOp bitSeqXor.
(* [?]: removed value specification. *)

Definition word256Min   : word256  -> word256  -> word256 :=  word256BinOp (bitSeqMin).
(* [?]: removed value specification. *)

Definition word256Max   : word256  -> word256  -> word256 :=  word256BinOp (bitSeqMax).
(* [?]: removed value specification. *)

Definition word256Power   : word256  -> nat  -> word256 :=  word256NatOp bitSeqPow.
(* [?]: removed value specification. *)

Definition word256Asr   : word256  -> nat  -> word256 :=  word256NatOp bitSeqArithmeticShiftRight.
(* [?]: removed value specification. *)

Definition word256Lsr   : word256  -> nat  -> word256 :=  word256NatOp bitSeqLogicalShiftRight.
(* [?]: removed value specification. *)

Definition word256Lsl   : word256  -> nat  -> word256 :=  word256NatOp bitSeqShiftLeft.


Instance x17_NumNegate : NumNegate word256 := {
   numNegate  :=  word256Negate
}.


Instance x16_NumAdd : NumAdd word256 := {
   numAdd  :=  word256Add
}.


Instance x15_NumMinus : NumMinus word256 := {
   numMinus  :=  word256Minus
}.


Instance x14_NumSucc : NumSucc word256 := {
   succ  :=  word256Succ
}.


Instance x13_NumPred : NumPred word256 := {
   pred  :=  word256Pred
}.


Instance x12_NumMult : NumMult word256 := {
   numMult  :=  word256Mult
}.


Instance x11_NumPow : NumPow word256 := {
   numPow  :=  word256Power
}.


Instance x10_NumIntegerDivision : NumIntegerDivision word256 := { 
   numIntegerDivision  :=  word256IntegerDivision
}.


Instance x9_NumDivision : NumDivision word256 := { 
   numDivision  :=  word256Division
}.


Instance x8_NumRemainder : NumRemainder word256 := { 
   numRemainder  :=  word256Remainder
}.


Instance x7_OrdMaxMin : OrdMaxMin word256 := { 
   max  :=  word256Max;
   min  :=  word256Min
}.


Instance x6_WordNot : WordNot word256 := { 
   lnot  :=  word256Lnot
}.


Instance x5_WordAnd : WordAnd word256 := { 
   conjunction  :=  word256Land
}.


Instance x4_WordOr : WordOr word256 := { 
   inclusive_or  :=  word256Lor
}.


Instance x3_WordXor : WordXor word256 := { 
   exclusive_or  :=  word256Lxor
}.


Instance x2_WordLsl : WordLsl word256 := { 
   left_shift  :=  word256Lsl
}.


Instance x1_WordLsr : WordLsr word256 := {
   logicial_right_shift  :=  word256Lsr
}.


Instance x0_WordAsr : WordAsr word256 := {
   arithmetic_right_shift  :=  word256Asr
}.

(* [?]: removed value specification. *)

Definition word256UGT  (a : word256 ) (b : word256 )  : bool :=  nat_gtb (word256ToNatural a) (word256ToNatural b).
(* [?]: removed value specification. *)

Definition word256ULT  (a : word256 ) (b : word256 )  : bool :=  nat_ltb (word256ToNatural a) (word256ToNatural b).
(* [?]: removed value specification. *)

Definition word256UGE  (a : word256 ) (b : word256 )  : bool :=  nat_gteb (word256ToNatural a) (word256ToNatural b).

