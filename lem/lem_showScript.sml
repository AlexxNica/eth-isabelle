(*Generated by Lem from show.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_stringTheory lem_maybeTheory lem_numTheory lem_basic_classesTheory lemTheory;

val _ = numLib.prefer_num();



val _ = new_theory "lem_show"



(*open import String Maybe Num Basic_classes*)

(*open import {hol} `lemTheory`*)

val _ = Hol_datatype `
(*  'a *) Show_class= <|
  show_method: 'a -> string
|>`;


val _ = Define `
(instance_Show_Show_string_dict= (<|

  show_method := (\ s.  STRCAT"\""  (STRCAT s "\""))|>))`;


(*val stringFromMaybe : forall 'a. ('a -> string) -> maybe 'a -> string*)
val _ = Define `
 (stringFromMaybe showX (SOME x)=   (STRCAT"Just ("  (STRCAT(showX x) ")")))
/\ (stringFromMaybe showX NONE=  "Nothing")`;


val _ = Define `
(instance_Show_Show_Maybe_maybe_dict dict_Show_Show_a= (<|

  show_method := (\ x_opt. stringFromMaybe  
  dict_Show_Show_a.show_method x_opt)|>))`;


(*val stringFromListAux : forall 'a. ('a -> string) -> list 'a -> string*)
 val stringFromListAux_defn = Defn.Hol_multi_defns `
 (stringFromListAux showX ([])=  "")
/\ (stringFromListAux showX (x::xs')=      
 ((case xs' of
        [] => showX x
      | _ =>  STRCAT(showX x)  (STRCAT"; " (stringFromListAux showX xs'))
      )))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) (List.map Defn.save_defn) stringFromListAux_defn;

(*val stringFromList : forall 'a. ('a -> string) -> list 'a -> string*)
val _ = Define `
 (stringFromList showX xs=   
 (STRCAT"["  (STRCAT(stringFromListAux showX xs) "]")))`;


val _ = Define `
(instance_Show_Show_list_dict dict_Show_Show_a= (<|

  show_method := (\ xs. stringFromList  
  dict_Show_Show_a.show_method xs)|>))`;


(*val stringFromPair : forall 'a 'b. ('a -> string) -> ('b -> string) -> ('a * 'b) -> string*)
val _ = Define `
 (stringFromPair showX showY (x,y)=   
 (STRCAT"("  (STRCAT(showX x)  (STRCAT", "  (STRCAT(showY y) ")")))))`;


val _ = Define `
(instance_Show_Show_tup2_dict dict_Show_Show_a dict_Show_Show_b= (<|

  show_method := (stringFromPair  
  dict_Show_Show_a.show_method  dict_Show_Show_b.show_method)|>))`;


val _ = Define `
(instance_Show_Show_bool_dict= (<|

  show_method := (\ b. if b then "true" else "false")|>))`;

val _ = export_theory()

