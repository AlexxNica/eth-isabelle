chapter {* Generated by Lem from word32.lem. *}

theory "Word32Auxiliary" 

imports 
 	 Main "~~/src/HOL/Library/Code_Target_Numeral"
	 "Lem_pervasives" 
	 "Lem_word" 
	 "Word32" 

begin 


(****************************************************)
(*                                                  *)
(* Lemmata                                          *)
(*                                                  *)
(****************************************************)

lemma bs_to_w32_def_lemma:
" ((\<forall> seq.
   (case  resizeBitSeq (Some (( 32 :: nat))) seq of
         BitSeq _ s b => W32 s b
   ) = (\<lambda> w .  word_of_int (integerFromBitSeq w)) seq)) "
(* Theorem: bs_to_w32_def_lemma*)(* try *) by auto

lemma w32_to_bs_def_lemma:
" ((\<forall> s. \<forall> b.
   BitSeq (Some (( 32 :: nat))) s b =
     (\<lambda> w .  bitSeqFromInteger (Some 32) (sint w)) (W32 s b))) "
(* Theorem: w32_to_bs_def_lemma*)(* try *) by auto

lemma word32ToInteger_def_lemma:
" ((\<forall> w.
   integerFromBitSeq
     ((\<lambda> w .  bitSeqFromInteger (Some 32) (sint w)) w) = sint w)) "
(* Theorem: word32ToInteger_def_lemma*)(* try *) by auto

lemma word32ToNatural_def_lemma:
" ((\<forall> w. nat (abs ((sint w) mod size32)) = unat w)) "
(* Theorem: word32ToNatural_def_lemma*)(* try *) by auto

lemma word32FromInteger_def_lemma:
" ((\<forall> i.
   (\<lambda> w .  word_of_int (integerFromBitSeq w))
     (bitSeqFromInteger (Some (( 32 :: nat))) i) =
     (\<lambda> i .  word_of_int ( i)) i)) "
(* Theorem: word32FromInteger_def_lemma*)(* try *) by auto

lemma word32FromInt_def_lemma:
" ((\<forall> i.
   (\<lambda> w .  word_of_int (integerFromBitSeq w))
     (bitSeqFromInteger (Some (( 32 :: nat))) ( i)) = word_of_int i)) "
(* Theorem: word32FromInt_def_lemma*)(* try *) by auto

lemma word32FromBoollist_def_lemma:
" ((\<forall> lst.
   (case  bitSeqFromBoolList (List.rev lst) of
         None => (\<lambda> w .  word_of_int (integerFromBitSeq w))
                   (bitSeqFromInteger None (( 0 :: int)))
     | Some a => (\<lambda> w .  word_of_int (integerFromBitSeq w)) a
   ) = of_bl lst)) "
(* Theorem: word32FromBoollist_def_lemma*)(* try *) by auto

lemma boolListFromWord32_def_lemma:
" ((\<forall> w.
   List.rev
     (boolListFrombitSeq (( 32 :: nat))
        ((\<lambda> w .  bitSeqFromInteger (Some 32) (sint w)) w)) = 
   to_bl w)) "
(* Theorem: boolListFromWord32_def_lemma*)(* try *) by auto

lemma word32FromNumeral_def_lemma:
" ((\<forall> w.
   (\<lambda> w .  word_of_int (integerFromBitSeq w))
     (bitSeqFromInteger None (( w :: int))) = ((word_of_int w) :: 32 word))) "
(* Theorem: word32FromNumeral_def_lemma*)(* try *) by auto

lemma w32Less_def_lemma:
" ((\<forall> bs1. \<forall> bs2.
   word32BinTest bitSeqLess bs1 bs2 = word_sless bs1 bs2)) "
(* Theorem: w32Less_def_lemma*)(* try *) by auto

lemma w32LessEqual_def_lemma:
" ((\<forall> bs1. \<forall> bs2.
   word32BinTest bitSeqLessEqual bs1 bs2 = word_sle bs1 bs2)) "
(* Theorem: w32LessEqual_def_lemma*)(* try *) by auto

lemma w32Greater_def_lemma:
" ((\<forall> bs1. \<forall> bs2.
   word32BinTest bitSeqGreater bs1 bs2 = word_sless bs2 bs1)) "
(* Theorem: w32Greater_def_lemma*)(* try *) by auto

lemma w32GreaterEqual_def_lemma:
" ((\<forall> bs1. \<forall> bs2.
   word32BinTest bitSeqGreaterEqual bs1 bs2 = word_sle bs2 bs1)) "
(* Theorem: w32GreaterEqual_def_lemma*)(* try *) by auto

lemma w32Compare_def_lemma:
" ((\<forall> bs1. \<forall> bs2.
   word32BinTest bitSeqCompare bs1 bs2 =
     (genericCompare word_sless w32Eq bs1 bs2))) "
(* Theorem: w32Compare_def_lemma*)(* try *) by auto

lemma word32Negate_def_lemma:
" (( word32UnaryOp bitSeqNegate = (\<lambda> i. - i))) "
(* Theorem: word32Negate_def_lemma*)(* try *) by auto

lemma word32Succ_def_lemma:
" (( word32UnaryOp bitSeqSucc = (\<lambda> n. n + 1))) "
(* Theorem: word32Succ_def_lemma*)(* try *) by auto

lemma word32Pred_def_lemma:
" (( word32UnaryOp bitSeqPred = (\<lambda> n. n - 1))) "
(* Theorem: word32Pred_def_lemma*)(* try *) by auto

lemma word32Lnot_def_lemma:
" (( word32UnaryOp bitSeqNot = (\<lambda> w. (NOT w)))) "
(* Theorem: word32Lnot_def_lemma*)(* try *) by auto

lemma word32Add_def_lemma:
" (( word32BinOp bitSeqAdd = (op+))) "
(* Theorem: word32Add_def_lemma*)(* try *) by auto

lemma word32Minus_def_lemma:
" (( word32BinOp bitSeqMinus = (op-))) "
(* Theorem: word32Minus_def_lemma*)(* try *) by auto

lemma word32Mult_def_lemma:
" (( word32BinOp bitSeqMult = (op*))) "
(* Theorem: word32Mult_def_lemma*)(* try *) by auto

lemma word32IntegerDivision_def_lemma:
" (( word32BinOp bitSeqDiv = (op div))) "
(* Theorem: word32IntegerDivision_def_lemma*)(* try *) by auto

lemma word32Division_def_lemma:
" (( word32BinOp bitSeqDiv = (op div))) "
(* Theorem: word32Division_def_lemma*)(* try *) by auto

lemma word32Remainder_def_lemma:
" (( word32BinOp bitSeqMod = (op mod))) "
(* Theorem: word32Remainder_def_lemma*)(* try *) by auto

lemma word32Land_def_lemma:
" (( word32BinOp bitSeqAnd = (op AND))) "
(* Theorem: word32Land_def_lemma*)(* try *) by auto

lemma word32Lor_def_lemma:
" (( word32BinOp bitSeqOr = (op OR))) "
(* Theorem: word32Lor_def_lemma*)(* try *) by auto

lemma word32Lxor_def_lemma:
" (( word32BinOp bitSeqXor = (op XOR))) "
(* Theorem: word32Lxor_def_lemma*)(* try *) by auto

lemma word32Min_def_lemma:
" (( word32BinOp (bitSeqMin) = min)) "
(* Theorem: word32Min_def_lemma*)(* try *) by auto

lemma word32Max_def_lemma:
" (( word32BinOp (bitSeqMax) = max)) "
(* Theorem: word32Max_def_lemma*)(* try *) by auto

lemma word32Power_def_lemma:
" (( word32NatOp bitSeqPow = (op^))) "
(* Theorem: word32Power_def_lemma*)(* try *) by auto

lemma word32Asr_def_lemma:
" (( word32NatOp bitSeqArithmeticShiftRight = (op>>>))) "
(* Theorem: word32Asr_def_lemma*)(* try *) by auto

lemma word32Lsr_def_lemma:
" (( word32NatOp bitSeqLogicalShiftRight = (op>>))) "
(* Theorem: word32Lsr_def_lemma*)(* try *) by auto

lemma word32Lsl_def_lemma:
" (( word32NatOp bitSeqShiftLeft = (op<<))) "
(* Theorem: word32Lsl_def_lemma*)(* try *) by auto

lemma word32UGT_def_lemma:
" ((\<forall> a. \<forall> b. (unat a > unat b) = a > b)) "
(* Theorem: word32UGT_def_lemma*)(* try *) by auto

lemma word32ULT_def_lemma:
" ((\<forall> a. \<forall> b. (unat a < unat b) = a < b)) "
(* Theorem: word32ULT_def_lemma*)(* try *) by auto

lemma word32UGE_def_lemma:
" ((\<forall> a. \<forall> b. (unat a \<ge> unat b) = a >= b)) "
(* Theorem: word32UGE_def_lemma*)(* try *) by auto



end
