(* Generated by Lem from block.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

(**)
(*Copyright 2016 Sami MÃ¤kelÃ¤*)
(**)
(* Licensed under the Apache License, Version 2.0 (the "License"); *)
(* you may not use this file except in compliance with the License. *)
(* You may obtain a copy of the License at *)
(**)
(*       http://www.apache.org/licenses/LICENSE-2.0 *)
(**)
(* Unless required by applicable law or agreed to in writing, software *)
(* distributed under the License is distributed on an "AS IS" BASIS, *)
(* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *)
(* See the License for the specific language governing permissions and *)
(* limitations under the License. *)

Require Import lem_pervasives.
Require Export lem_pervasives.

(*
open import Word
open import Word256
open import Word160
open import Word8
*)
Require Import keccak.
Require Export keccak.

Require Import evm.
Require Export evm.


Record transaction : Type := {
  tr_from : address ;
  tr_to : option  address  ;
  tr_gas_limit : w256 ;
  tr_gas_price : w256 ;
  tr_nonce : w256 ;
  tr_data : list  byte 
}.
Notation "{[ r 'with' 'tr_from' := e ]}" := ({| tr_from := e; tr_to := tr_to r; tr_gas_limit := tr_gas_limit r; tr_gas_price := tr_gas_price r; tr_nonce := tr_nonce r; tr_data := tr_data r |}).
Notation "{[ r 'with' 'tr_to' := e ]}" := ({| tr_to := e; tr_from := tr_from r; tr_gas_limit := tr_gas_limit r; tr_gas_price := tr_gas_price r; tr_nonce := tr_nonce r; tr_data := tr_data r |}).
Notation "{[ r 'with' 'tr_gas_limit' := e ]}" := ({| tr_gas_limit := e; tr_from := tr_from r; tr_to := tr_to r; tr_gas_price := tr_gas_price r; tr_nonce := tr_nonce r; tr_data := tr_data r |}).
Notation "{[ r 'with' 'tr_gas_price' := e ]}" := ({| tr_gas_price := e; tr_from := tr_from r; tr_to := tr_to r; tr_gas_limit := tr_gas_limit r; tr_nonce := tr_nonce r; tr_data := tr_data r |}).
Notation "{[ r 'with' 'tr_nonce' := e ]}" := ({| tr_nonce := e; tr_from := tr_from r; tr_to := tr_to r; tr_gas_limit := tr_gas_limit r; tr_gas_price := tr_gas_price r; tr_data := tr_data r |}).
Notation "{[ r 'with' 'tr_data' := e ]}" := ({| tr_data := e; tr_from := tr_from r; tr_to := tr_to r; tr_gas_limit := tr_gas_limit r; tr_gas_price := tr_gas_price r; tr_nonce := tr_nonce r |}).
Definition transaction_default: transaction  := {| tr_from := address_default; tr_to := DAEMON; tr_gas_limit := w256_default; tr_gas_price := w256_default; tr_nonce := w256_default; tr_data := DAEMON |}.

Definition world_state : Type :=  address  ->  account_state .
Definition world_state_default: world_state  := (fun (x122 :  address ) => account_state_default).

Record log_item : Type := {
  log_address : address ;
  log_topics0 : list  w256 ;
  log_data0 : list  byte 
}.
Notation "{[ r 'with' 'log_address' := e ]}" := ({| log_address := e; log_topics0 := log_topics0 r; log_data0 := log_data0 r |}).
Notation "{[ r 'with' 'log_topics0' := e ]}" := ({| log_topics0 := e; log_address := log_address r; log_data0 := log_data0 r |}).
Notation "{[ r 'with' 'log_data0' := e ]}" := ({| log_data0 := e; log_address := log_address r; log_topics0 := log_topics0 r |}).
Definition log_item_default: log_item  := {| log_address := address_default; log_topics0 := DAEMON; log_data0 := DAEMON |}.

Record receipt : Type := {
  receipt_state : world_state ;
  receipt_cumulative_gas : w256 ;
  receipt_bloom : w256 ;
  receipt_logs : list  log_item 
}.
Notation "{[ r 'with' 'receipt_state' := e ]}" := ({| receipt_state := e; receipt_cumulative_gas := receipt_cumulative_gas r; receipt_bloom := receipt_bloom r; receipt_logs := receipt_logs r |}).
Notation "{[ r 'with' 'receipt_cumulative_gas' := e ]}" := ({| receipt_cumulative_gas := e; receipt_state := receipt_state r; receipt_bloom := receipt_bloom r; receipt_logs := receipt_logs r |}).
Notation "{[ r 'with' 'receipt_bloom' := e ]}" := ({| receipt_bloom := e; receipt_state := receipt_state r; receipt_cumulative_gas := receipt_cumulative_gas r; receipt_logs := receipt_logs r |}).
Notation "{[ r 'with' 'receipt_logs' := e ]}" := ({| receipt_logs := e; receipt_state := receipt_state r; receipt_cumulative_gas := receipt_cumulative_gas r; receipt_bloom := receipt_bloom r |}).
Definition receipt_default: receipt  := {| receipt_state := world_state_default; receipt_cumulative_gas := w256_default; receipt_bloom := w256_default; receipt_logs := DAEMON |}.

Record block : Type := {
  block_parent_hash : w256 ;
  block_uncles_hash : list  w256 ;
  block_coinbase0 : address ;
  block_state : world_state ;
  block_transactions : list  ((transaction  * receipt ) % type);
  block_logs_bloom : w256 ;
  block_difficulty0 : w256 ;
  block_number0 : w256 ;
  block_gas_limit : w256 ;
  block_timestampt : w256 ;
  block_nonce : w256 
}.
Notation "{[ r 'with' 'block_parent_hash' := e ]}" := ({| block_parent_hash := e; block_uncles_hash := block_uncles_hash r; block_coinbase0 := block_coinbase0 r; block_state := block_state r; block_transactions := block_transactions r; block_logs_bloom := block_logs_bloom r; block_difficulty0 := block_difficulty0 r; block_number0 := block_number0 r; block_gas_limit := block_gas_limit r; block_timestampt := block_timestampt r; block_nonce := block_nonce r |}).
Notation "{[ r 'with' 'block_uncles_hash' := e ]}" := ({| block_uncles_hash := e; block_parent_hash := block_parent_hash r; block_coinbase0 := block_coinbase0 r; block_state := block_state r; block_transactions := block_transactions r; block_logs_bloom := block_logs_bloom r; block_difficulty0 := block_difficulty0 r; block_number0 := block_number0 r; block_gas_limit := block_gas_limit r; block_timestampt := block_timestampt r; block_nonce := block_nonce r |}).
Notation "{[ r 'with' 'block_coinbase0' := e ]}" := ({| block_coinbase0 := e; block_parent_hash := block_parent_hash r; block_uncles_hash := block_uncles_hash r; block_state := block_state r; block_transactions := block_transactions r; block_logs_bloom := block_logs_bloom r; block_difficulty0 := block_difficulty0 r; block_number0 := block_number0 r; block_gas_limit := block_gas_limit r; block_timestampt := block_timestampt r; block_nonce := block_nonce r |}).
Notation "{[ r 'with' 'block_state' := e ]}" := ({| block_state := e; block_parent_hash := block_parent_hash r; block_uncles_hash := block_uncles_hash r; block_coinbase0 := block_coinbase0 r; block_transactions := block_transactions r; block_logs_bloom := block_logs_bloom r; block_difficulty0 := block_difficulty0 r; block_number0 := block_number0 r; block_gas_limit := block_gas_limit r; block_timestampt := block_timestampt r; block_nonce := block_nonce r |}).
Notation "{[ r 'with' 'block_transactions' := e ]}" := ({| block_transactions := e; block_parent_hash := block_parent_hash r; block_uncles_hash := block_uncles_hash r; block_coinbase0 := block_coinbase0 r; block_state := block_state r; block_logs_bloom := block_logs_bloom r; block_difficulty0 := block_difficulty0 r; block_number0 := block_number0 r; block_gas_limit := block_gas_limit r; block_timestampt := block_timestampt r; block_nonce := block_nonce r |}).
Notation "{[ r 'with' 'block_logs_bloom' := e ]}" := ({| block_logs_bloom := e; block_parent_hash := block_parent_hash r; block_uncles_hash := block_uncles_hash r; block_coinbase0 := block_coinbase0 r; block_state := block_state r; block_transactions := block_transactions r; block_difficulty0 := block_difficulty0 r; block_number0 := block_number0 r; block_gas_limit := block_gas_limit r; block_timestampt := block_timestampt r; block_nonce := block_nonce r |}).
Notation "{[ r 'with' 'block_difficulty0' := e ]}" := ({| block_difficulty0 := e; block_parent_hash := block_parent_hash r; block_uncles_hash := block_uncles_hash r; block_coinbase0 := block_coinbase0 r; block_state := block_state r; block_transactions := block_transactions r; block_logs_bloom := block_logs_bloom r; block_number0 := block_number0 r; block_gas_limit := block_gas_limit r; block_timestampt := block_timestampt r; block_nonce := block_nonce r |}).
Notation "{[ r 'with' 'block_number0' := e ]}" := ({| block_number0 := e; block_parent_hash := block_parent_hash r; block_uncles_hash := block_uncles_hash r; block_coinbase0 := block_coinbase0 r; block_state := block_state r; block_transactions := block_transactions r; block_logs_bloom := block_logs_bloom r; block_difficulty0 := block_difficulty0 r; block_gas_limit := block_gas_limit r; block_timestampt := block_timestampt r; block_nonce := block_nonce r |}).
Notation "{[ r 'with' 'block_gas_limit' := e ]}" := ({| block_gas_limit := e; block_parent_hash := block_parent_hash r; block_uncles_hash := block_uncles_hash r; block_coinbase0 := block_coinbase0 r; block_state := block_state r; block_transactions := block_transactions r; block_logs_bloom := block_logs_bloom r; block_difficulty0 := block_difficulty0 r; block_number0 := block_number0 r; block_timestampt := block_timestampt r; block_nonce := block_nonce r |}).
Notation "{[ r 'with' 'block_timestampt' := e ]}" := ({| block_timestampt := e; block_parent_hash := block_parent_hash r; block_uncles_hash := block_uncles_hash r; block_coinbase0 := block_coinbase0 r; block_state := block_state r; block_transactions := block_transactions r; block_logs_bloom := block_logs_bloom r; block_difficulty0 := block_difficulty0 r; block_number0 := block_number0 r; block_gas_limit := block_gas_limit r; block_nonce := block_nonce r |}).
Notation "{[ r 'with' 'block_nonce' := e ]}" := ({| block_nonce := e; block_parent_hash := block_parent_hash r; block_uncles_hash := block_uncles_hash r; block_coinbase0 := block_coinbase0 r; block_state := block_state r; block_transactions := block_transactions r; block_logs_bloom := block_logs_bloom r; block_difficulty0 := block_difficulty0 r; block_number0 := block_number0 r; block_gas_limit := block_gas_limit r; block_timestampt := block_timestampt r |}).
Definition block_default: block  := {| block_parent_hash := w256_default; block_uncles_hash := DAEMON; block_coinbase0 := address_default; block_state := world_state_default; block_transactions := DAEMON; block_logs_bloom := w256_default; block_difficulty0 := w256_default; block_number0 := w256_default; block_gas_limit := w256_default; block_timestampt := w256_default; block_nonce := w256_default |}.
